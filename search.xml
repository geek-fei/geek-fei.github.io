<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue打开摄像头</title>
      <link href="/2024/08/01/vue-da-kai-she-xiang-tou/"/>
      <url>/2024/08/01/vue-da-kai-she-xiang-tou/</url>
      
        <content type="html"><![CDATA[<h2 id="方式一：打开摄像头和关闭摄像头"><a href="#方式一：打开摄像头和关闭摄像头" class="headerlink" title="方式一：打开摄像头和关闭摄像头"></a>方式一：打开摄像头和关闭摄像头</h2><p>在 Vue 中打开摄像头，通常需要结合前端的 JavaScript 技术以及相关的浏览器 API 来实现。以下是一个基本的示例步骤：</p><ol><li>获取用户权限<br>可以使用 navigator.mediaDevices.getUserMedia() 方法来请求权限。</li><li>处理获取到的媒体流<br>一旦用户授予权限，getUserMedia() 方法会返回一个 MediaStream 对象，您可以将其与 <video> 元素关联，以显示摄像头的实时画面。</video></li></ol><p>以下是一个简单的示例代码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;video ref="video" autoplay&gt;&lt;/video&gt;    &lt;button @click="startCamera"&gt;打开摄像头&lt;/button&gt;    &lt;button @click="handleClose"&gt;关闭摄像头&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt; &lt;script setup&gt;import {ref} from 'vue';import { ElMessage } from 'element-plus';  const videoRef = ref();// 打开摄像头staremconst videoStream = ref(null);// 判断浏览器是否支持获取摄像头const isCameraSupported = () =&gt; {  if (navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) {    try {      navigator.mediaDevices.getUserMedia({ video: true });      return true;    } catch (err) {      return false;    }  } else {    return false;  }}// 打开摄像头const startCamera = () =&gt; {  // 判断浏览器是否支持获取摄像头  if(isCameraSupported()){    // 打开摄像头    navigator.mediaDevices.getUserMedia({ video: true })      .then(stream =&gt; {        // 临时存储打开的摄像头starem        videoStream.value = stream;        // 将摄像头starem赋值给&lt;video&gt;进行渲染摄像头画面        videoRef.value.srcObject = stream;      })      .catch(error =&gt; {        console.error('摄像头打开错误：', error);      });  } else {    console.error('浏览器不支持获取摄像头');  }  }// 检查摄像头是否正常(判断摄像头画面是否为黑屏)const hasCameraFeed = (videoElement) =&gt; {  // 检查视频元素是否正在加载  if (videoElement.readyState &gt;= 3) {    // 获取视频的当前帧数据    const canvas = document.createElement('canvas');    canvas.width = videoElement.videoWidth;    canvas.height = videoElement.videoHeight;    const ctx = canvas.getContext('2d');    ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);    // 将图像数据转换为数组    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);    const data = imageData.data;    // 检查图像数据是否全为黑色（表示没有画面）    let allBlack = true;    for (let i = 0; i &lt; data.length; i += 4) {      if (data[i]!== 0 || data[i + 1]!== 0 || data[i + 2]!== 0) {        allBlack = false;        break;      }    }    return !allBlack;  } else {    return false;  }}  // 关闭调试摄像头const handleClose = () =&gt; {  // 检查摄像头临时存储的stream和画面是否为黑屏  if (videoStream.value &amp;&amp; hasCameraFeed()) {    // 关闭摄像头    videoStream.value.getTracks().forEach((track) =&gt; {      track.stop();    });    // 降临时存储的摄像头stream赋值为null    videoStream.value = null;  } else {    console.log('未打开摄像头');    // TODO 检查摄像头是否正常    ElMessage({      message: '确保摄像头画面清晰，且没有遮挡',      type: 'warning',    })    return;  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方式二：打开摄像头列表，选择要使用的摄像头"><a href="#方式二：打开摄像头列表，选择要使用的摄像头" class="headerlink" title="方式二：打开摄像头列表，选择要使用的摄像头"></a>方式二：打开摄像头列表，选择要使用的摄像头</h2><p>每台电脑回对应有不同的摄像头设备,获取连接多个摄像头设备，此时就得获取到所有摄像头列表，进行选择使用哪一个摄像头。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;video ref="video" autoplay&gt;&lt;/video&gt;    &lt;!-- 摄像头列表: 选择摄像头,根据摄像头deviceId打开对应设备的摄像头 --&gt;    &lt;el-select v-model='currentVideoDeviceId' @change='startCamera'&gt;      &lt;el-option        v-for="item in videoList"        :key="item.deviceId"        :label="item.label"        :value="item.deviceId"      /&gt;    &lt;/el-select&gt;    &lt;button @click="getCameraList"&gt;打开摄像头&lt;/button&gt;    &lt;button @click="handleClose"&gt;关闭摄像头&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt; &lt;script setup&gt;import {ref} from 'vue';import { ElMessage } from 'element-plus';  const videoRef = ref();// 打开摄像头staremconst videoStream = ref(null);// 所有摄像头数据const videoList = ref([]);// 当前摄像头设备Idconst currentVideoDeviceId = ref('');// 判断浏览器是否支持获取摄像头const isCameraSupported = () =&gt; {  if (navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) {    try {      navigator.mediaDevices.getUserMedia({ video: true });      return true;    } catch (err) {      return false;    }  } else {    return false;  }}  // 获取摄像头列表const getCameraList = () =&gt; {  // 判断浏览器是否支持获取摄像头  if(isCameraSupported()){    navigator.mediaDevices.enumerateDevices()      .then(devices =&gt; {        const cameras = devices.filter(device =&gt; device.kind === 'videoinput');        console.log('所有摄像头',cameras);        /**          所有摄像头列表数据:          [{            deviceId: "03ce2165757a21b4c7e31c243b0e74b2ab42cd408a542900709155a7dfa936fa",            groupId: "2431f3cf786e40c3534393d63a20d35a48e38c5056a8c360bc808249ce594ed0",            kind: "videoinput",            label: "BisonCam,NB Pro (5986:9102)"          },...]          label字段为摄像头设备的名称, deviceId为摄像头设备对应的唯一值        */                // TODO 将所有摄像头赋值给下拉选择 cameras        videoList.value = cameras;        // 默认打开第一个摄像头        startCamera(cameras[0].deviceId);      })      .catch(error =&gt; console.error('获取摄像头列表失败:', error));  } else {    console.error('浏览器不支持获取摄像头');  }  }/**  根据摄像头的 deviceId 打开对应的摄像头*/const startCamera = (deviceId) =&gt; {  // 获取摄像头deviceId  const constraints = {    video: { deviceId: { exact: deviceId } }  };  // 根据摄像头deviceId打开摄像头  navigator.mediaDevices.getUserMedia(constraints)      .then(stream =&gt; {        // 临时存储摄像有的startem        videoStream.value = stream;        // 赋值给&lt;video&gt;渲染摄像头的画面        videoRef.value.srcObject = stream;      })      .catch(error =&gt; {        console.error('摄像头打开错误：', error);      });}// 检查摄像头是否正常(判断摄像头画面是否为黑屏)const hasCameraFeed = (videoElement) =&gt; {  // 检查视频元素是否正在加载  if (videoElement.readyState &gt;= 3) {    // 获取视频的当前帧数据    const canvas = document.createElement('canvas');    canvas.width = videoElement.videoWidth;    canvas.height = videoElement.videoHeight;    const ctx = canvas.getContext('2d');    ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);    // 将图像数据转换为数组    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);    const data = imageData.data;    // 检查图像数据是否全为黑色（表示没有画面）    let allBlack = true;    for (let i = 0; i &lt; data.length; i += 4) {      if (data[i]!== 0 || data[i + 1]!== 0 || data[i + 2]!== 0) {        allBlack = false;        break;      }    }    return !allBlack;  } else {    return false;  }}  // 关闭调试摄像头const handleClose = () =&gt; {  // 检查摄像头临时存储的stream和画面是否为黑屏  if (videoStream.value &amp;&amp; hasCameraFeed()) {    // 关闭摄像头    videoStream.value.getTracks().forEach((track) =&gt; {      track.stop();    });    // 降临时存储的摄像头stream赋值为null    videoStream.value = null;  } else {    // TODO 检查摄像头是否正常    ElMessage({      message: '确保摄像头画面清晰，且没有遮挡',      type: 'warning',    })    return;  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>article title</title>
      <link href="/2024/03/04/article-title/"/>
      <url>/2024/03/04/article-title/</url>
      
        <content type="html"><![CDATA[<p>内容111….</p>]]></content>
      
      
      <categories>
          
          <category> 分类1 </category>
          
          <category> 分类2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 </tag>
            
            <tag> 标签2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/02/hello-world/"/>
      <url>/2024/03/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
